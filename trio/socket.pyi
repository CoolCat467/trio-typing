from typing import Union, AnyStr, Optional, Tuple, List, Any, TypeVar, overload
import trio

T = TypeVar('T')

import socket
from socket import (
    AF_UNIX,
    AF_INET,
    AF_INET6,
    SOCK_STREAM,
    SOCK_DGRAM,
    SOCK_RAW,
    SOCK_RDM,
    SOCK_SEQPACKET,
    SOCK_CLOEXEC,
    SOCK_NONBLOCK,
    SOMAXCONN,
    AF_AAL5,
    AF_APPLETALK,
    AF_ASH,
    AF_ATMPVC,
    AF_ATMSVC,
    AF_AX25,
    AF_BLUETOOTH,
    AF_BRIDGE,
    AF_CAN,
    AF_DECnet,
    AF_ECONET,
    AF_IPX,
    AF_IRDA,
    AF_KEY,
    AF_LLC,
    AF_NETBEUI,
    AF_NETLINK,
    AF_NETROM,
    AF_PACKET,
    AF_PPPOX,
    AF_RDS,
    AF_ROSE,
    AF_ROUTE,
    AF_SECURITY,
    AF_SNA,
    AF_SYSTEM,
    AF_TIPC,
    AF_UNSPEC,
    AF_WANPIPE,
    AF_X25,
    AI_ADDRCONFIG,
    AI_ALL,
    AI_CANONNAME,
    AI_DEFAULT,
    AI_MASK,
    AI_NUMERICHOST,
    AI_NUMERICSERV,
    AI_PASSIVE,
    AI_V4MAPPED,
    AI_V4MAPPED_CFG,
    BDADDR_ANY,
    BDADDR_LOCAL,
    BTPROTO_HCI,
    BTPROTO_L2CAP,
    BTPROTO_RFCOMM,
    BTPROTO_SCO,
    CAN_EFF_FLAG,
    CAN_EFF_MASK,
    CAN_ERR_FLAG,
    CAN_ERR_MASK,
    CAN_RAW,
    CAN_RAW_ERR_FILTER,
    CAN_RAW_FILTER,
    CAN_RAW_LOOPBACK,
    CAN_RAW_RECV_OWN_MSGS,
    CAN_RTR_FLAG,
    CAN_SFF_MASK,
    CAPI,
    EAGAIN,
    EAI_ADDRFAMILY,
    EAI_AGAIN,
    EAI_BADFLAGS,
    EAI_BADHINTS,
    EAI_FAIL,
    EAI_FAMILY,
    EAI_MAX,
    EAI_MEMORY,
    EAI_NODATA,
    EAI_NONAME,
    EAI_OVERFLOW,
    EAI_PROTOCOL,
    EAI_SERVICE,
    EAI_SOCKTYPE,
    EAI_SYSTEM,
    EBADF,
    EINTR,
    EWOULDBLOCK,
    HCI_DATA_DIR,
    HCI_FILTER,
    HCI_TIME_STAMP,
    INADDR_ALLHOSTS_GROUP,
    INADDR_ANY,
    INADDR_BROADCAST,
    INADDR_LOOPBACK,
    INADDR_MAX_LOCAL_GROUP,
    INADDR_NONE,
    INADDR_UNSPEC_GROUP,
    IPPORT_RESERVED,
    IPPORT_USERRESERVED,
    IPPROTO_AH,
    IPPROTO_BIP,
    IPPROTO_DSTOPTS,
    IPPROTO_EGP,
    IPPROTO_EON,
    IPPROTO_ESP,
    IPPROTO_FRAGMENT,
    IPPROTO_GGP,
    IPPROTO_GRE,
    IPPROTO_HELLO,
    IPPROTO_HOPOPTS,
    IPPROTO_ICMP,
    IPPROTO_ICMPV6,
    IPPROTO_IDP,
    IPPROTO_IGMP,
    IPPROTO_IP,
    IPPROTO_IPCOMP,
    IPPROTO_IPIP,
    IPPROTO_IPV4,
    IPPROTO_IPV6,
    IPPROTO_MAX,
    IPPROTO_MOBILE,
    IPPROTO_ND,
    IPPROTO_NONE,
    IPPROTO_PIM,
    IPPROTO_PUP,
    IPPROTO_RAW,
    IPPROTO_ROUTING,
    IPPROTO_RSVP,
    IPPROTO_SCTP,
    IPPROTO_TCP,
    IPPROTO_TP,
    IPPROTO_UDP,
    IPPROTO_VRRP,
    IPPROTO_XTP,
    IPV6_CHECKSUM,
    IPV6_DONTFRAG,
    IPV6_DSTOPTS,
    IPV6_HOPLIMIT,
    IPV6_HOPOPTS,
    IPV6_JOIN_GROUP,
    IPV6_LEAVE_GROUP,
    IPV6_MULTICAST_HOPS,
    IPV6_MULTICAST_IF,
    IPV6_MULTICAST_LOOP,
    IPV6_NEXTHOP,
    IPV6_PATHMTU,
    IPV6_PKTINFO,
    IPV6_RECVDSTOPTS,
    IPV6_RECVHOPLIMIT,
    IPV6_RECVHOPOPTS,
    IPV6_RECVPATHMTU,
    IPV6_RECVPKTINFO,
    IPV6_RECVRTHDR,
    IPV6_RECVTCLASS,
    IPV6_RTHDR,
    IPV6_RTHDR_TYPE_0,
    IPV6_RTHDRDSTOPTS,
    IPV6_TCLASS,
    IPV6_UNICAST_HOPS,
    IPV6_USE_MIN_MTU,
    IPV6_V6ONLY,
    IP_ADD_MEMBERSHIP,
    IP_DEFAULT_MULTICAST_LOOP,
    IP_DEFAULT_MULTICAST_TTL,
    IP_DROP_MEMBERSHIP,
    IP_HDRINCL,
    IP_MAX_MEMBERSHIPS,
    IP_MULTICAST_IF,
    IP_MULTICAST_LOOP,
    IP_MULTICAST_TTL,
    IP_OPTIONS,
    IP_RECVDSTADDR,
    IP_RECVOPTS,
    IP_RECVRETOPTS,
    IP_RETOPTS,
    IP_TOS,
    IP_TRANSPARENT,
    IP_TTL,
    IPX_TYPE,
    LOCAL_PEERCRED,
    MSG_BCAST,
    MSG_BTAG,
    MSG_CMSG_CLOEXEC,
    MSG_CONFIRM,
    MSG_CTRUNC,
    MSG_DONTROUTE,
    MSG_DONTWAIT,
    MSG_EOF,
    MSG_EOR,
    MSG_ERRQUEUE,
    MSG_ETAG,
    MSG_FASTOPEN,
    MSG_MCAST,
    MSG_MORE,
    MSG_NOSIGNAL,
    MSG_NOTIFICATION,
    MSG_OOB,
    MSG_PEEK,
    MSG_TRUNC,
    MSG_WAITALL,
    NETLINK_ARPD,
    NETLINK_CRYPTO,
    NETLINK_DNRTMSG,
    NETLINK_FIREWALL,
    NETLINK_IP6_FW,
    NETLINK_NFLOG,
    NETLINK_ROUTE6,
    NETLINK_ROUTE,
    NETLINK_SKIP,
    NETLINK_TAPBASE,
    NETLINK_TCPDIAG,
    NETLINK_USERSOCK,
    NETLINK_W1,
    NETLINK_XFRM,
    NI_DGRAM,
    NI_MAXHOST,
    NI_MAXSERV,
    NI_NAMEREQD,
    NI_NOFQDN,
    NI_NUMERICHOST,
    NI_NUMERICSERV,
    PACKET_BROADCAST,
    PACKET_FASTROUTE,
    PACKET_HOST,
    PACKET_LOOPBACK,
    PACKET_MULTICAST,
    PACKET_OTHERHOST,
    PACKET_OUTGOING,
    PF_CAN,
    PF_PACKET,
    PF_RDS,
    PF_SYSTEM,
    SCM_CREDENTIALS,
    SCM_CREDS,
    SCM_RIGHTS,
    SHUT_RD,
    SHUT_RDWR,
    SHUT_WR,
    SOL_ATALK,
    SOL_AX25,
    SOL_CAN_BASE,
    SOL_CAN_RAW,
    SOL_HCI,
    SOL_IP,
    SOL_IPX,
    SOL_NETROM,
    SOL_RDS,
    SOL_ROSE,
    SOL_SOCKET,
    SOL_TCP,
    SOL_TIPC,
    SOL_UDP,
    SO_ACCEPTCONN,
    SO_BINDTODEVICE,
    SO_BROADCAST,
    SO_DEBUG,
    SO_DONTROUTE,
    SO_ERROR,
    SO_EXCLUSIVEADDRUSE,
    SO_KEEPALIVE,
    SO_LINGER,
    SO_MARK,
    SO_OOBINLINE,
    SO_PASSCRED,
    SO_PEERCRED,
    SO_PRIORITY,
    SO_RCVBUF,
    SO_RCVLOWAT,
    SO_RCVTIMEO,
    SO_REUSEADDR,
    SO_REUSEPORT,
    SO_SETFIB,
    SO_SNDBUF,
    SO_SNDLOWAT,
    SO_SNDTIMEO,
    SO_TYPE,
    SO_USELOOPBACK,
    SYSPROTO_CONTROL,
    TCP_CORK,
    TCP_DEFER_ACCEPT,
    TCP_FASTOPEN,
    TCP_INFO,
    TCP_KEEPCNT,
    TCP_KEEPIDLE,
    TCP_KEEPINTVL,
    TCP_LINGER2,
    TCP_MAXSEG,
    TCP_NODELAY,
    TCP_NOTSENT_LOWAT,
    TCP_QUICKACK,
    TCP_SYNCNT,
    TCP_WINDOW_CLAMP,
    TIPC_ADDR_ID,
    TIPC_ADDR_NAME,
    TIPC_ADDR_NAMESEQ,
    TIPC_CFG_SRV,
    TIPC_CLUSTER_SCOPE,
    TIPC_CONN_TIMEOUT,
    TIPC_CRITICAL_IMPORTANCE,
    TIPC_DEST_DROPPABLE,
    TIPC_HIGH_IMPORTANCE,
    TIPC_IMPORTANCE,
    TIPC_LOW_IMPORTANCE,
    TIPC_MEDIUM_IMPORTANCE,
    TIPC_NODE_SCOPE,
    TIPC_PUBLISHED,
    TIPC_SRC_DROPPABLE,
    TIPC_SUB_CANCEL,
    TIPC_SUB_PORTS,
    TIPC_SUB_SERVICE,
    TIPC_SUBSCR_TIMEOUT,
    TIPC_TOP_SRV,
    TIPC_WAIT_FOREVER,
    TIPC_WITHDRAWN,
    TIPC_ZONE_SCOPE,
    RDS_CANCEL_SENT_TO,
    RDS_CMSG_RDMA_ARGS,
    RDS_CMSG_RDMA_DEST,
    RDS_CMSG_RDMA_MAP,
    RDS_CMSG_RDMA_STATUS,
    RDS_CMSG_RDMA_UPDATE,
    RDS_CONG_MONITOR,
    RDS_FREE_MR,
    RDS_GET_MR,
    RDS_GET_MR_FOR_DEST,
    RDS_RDMA_DONTWAIT,
    RDS_RDMA_FENCE,
    RDS_RDMA_INVALIDATE,
    RDS_RDMA_NOTIFY_ME,
    RDS_RDMA_READWRITE,
    RDS_RDMA_SILENT,
    RDS_RDMA_USE_ONCE,
    RDS_RECVERR,
    CAN_BCM,
    CAN_BCM_TX_SETUP,
    CAN_BCM_TX_DELETE,
    CAN_BCM_TX_READ,
    CAN_BCM_TX_SEND,
    CAN_BCM_RX_SETUP,
    CAN_BCM_RX_DELETE,
    CAN_BCM_RX_READ,
    CAN_BCM_TX_STATUS,
    CAN_BCM_TX_EXPIRED,
    CAN_BCM_RX_STATUS,
    CAN_BCM_RX_TIMEOUT,
    CAN_BCM_RX_CHANGED,
    AF_LINK,
    CAN_RAW_FD_FRAMES,
    SO_DOMAIN,
    SO_PROTOCOL,
    SO_PEERSEC,
    SO_PASSSEC,
    TCP_USER_TIMEOUT,
    TCP_CONGESTION,
    AF_ALG,
    SOL_ALG,
    ALG_SET_KEY,
    ALG_SET_IV,
    ALG_SET_OP,
    ALG_SET_AEAD_ASSOCLEN,
    ALG_SET_AEAD_AUTHSIZE,
    ALG_SET_PUBKEY,
    ALG_OP_DECRYPT,
    ALG_OP_ENCRYPT,
    ALG_OP_SIGN,
    ALG_OP_VERIFY,
)

from socket import (
    gaierror, herror, gethostname, ntohl, ntohs, htonl, htons,
    inet_aton, inet_ntoa, inet_pton, inet_ntop,
    sethostname, if_nameindex, if_nametoindex, if_indextoname
)

def set_custom_hostname_resolver(
    hostname_resolver: Optional[trio.abc.HostnameResolver]
) -> Optional[trio.abc.HostnameResolver]: ...

def set_custom_socket_factory(
    socket_factory: Optional[trio.abc.SocketFactory]
) -> Optional[trio.abc.SocketFactory]: ...

async def getnameinfo(sockaddr: tuple, flags: int) -> Tuple[str, int]: ...
async def getprotobyname(name: str) -> int: ...
async def getaddrinfo(
    host: Union[bytearray, bytes, str],
    port: Union[str, int, None],
    family: int = ...,
    type: int = ...,
    proto: int = ...,
    flags: int = ...
) -> List[Tuple[int, int, int, str, Tuple[Any, ...]]]: ...

class SocketType: pass
class _SocketType(SocketType):
    family: int
    type: int
    proto: int
    did_shutdown_SHUT_WR: bool

    def __enter__(self: T) -> T: ...
    def __exit__(self, *args: Any) -> None: ...
    def dup(self) -> _SocketType: ...
    def close(self) -> None: ...
    async def bind(self, address: Union[tuple, str, bytes]) -> None: ...
    def shutdown(self, flag: int) -> None: ...
    async def wait_writable(self) -> None: ...
    async def accept(self) -> Tuple[_SocketType, Any]: ...
    async def connect(self, address: Union[tuple, str, bytes]) -> None: ...
    async def recv(self, bufsize: int, flags: int = ...) -> bytes: ...
    async def recv_into(
        self, buffer: Union[bytearray,memoryview], nbytes: int, flags: int = ...
    ) -> int: ...
    async def recvfrom(
        self, bufsize: int, flags: int = ...
    ) -> Tuple[bytes, Any]: ...
    async def recvfrom_into(
        self, buffer: Union[bytearray,memoryview], nbytes: int, flags: int = ...
    ) -> Tuple[int, Any]: ...
    # TODO: recvmsg, recvmsg_into, sendmsg
    async def send(self, data: bytes, flags: int = ...) -> int: ...
    @overload
    async def sendto(self, data: bytes, address: Union[tuple, str]) -> int: ...
    @overload
    async def sendto(
        self, data: bytes, flags: int, address: Union[tuple, str]
    ) -> int: ...

    def detach(self) -> int: ...
    def fileno(self) -> int: ...
    def getpeername(self) -> Any: ...
    def getsockname(self) -> Any: ...

    @overload
    def getsockopt(self, level: int, optname: int) -> int: ...
    @overload
    def getsockopt(self, level: int, optname: int, buflen: int) -> bytes: ...
    def setsockopt(
        self, level: int, optname: int, value: Union[int, bytes]
    ) -> None: ...
    def listen(self, backlog: int) -> None: ...

def fromfd(fd: int, family: int, type: int, proto: int = ...) -> _SocketType: ...
def from_stdlib_socket(sock: socket.socket) -> _SocketType: ...
def socketpair(
    family: int = ..., type: int = ..., proto: int = ...
) -> Tuple[_SocketType, _SocketType]: ...
def socket(
    family: int = ...,
    type: int = ...,
    proto: int = ...,
    fileno: Optional[int] = ...
) -> _SocketType: ...
